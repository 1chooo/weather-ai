{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Weather and Artificial Intelligence","text":"<p>The course \"Weather and Artificial Intelligence\" at Dept. Atm, NCU.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"reference/","title":"Reference","text":""},{"location":"usage/","title":"Usage","text":"<p>Python 3.7.6 <pre><code>pip install --upgrade pip\npip install matplotlib\npip install pandas\npip install scikit-learn\npip install keras\npip install tensorflow\npip install torch\npip install opencv-python\npip install nltk\n\npip install mkdocs\npip install mkdocs-material\npip install pymdown-extensions\npip install mkdocstrings\npip install mkdocs-git-revision-date-plugin\npip install mkdocs-jupyter\n</code></pre></p> <pre><code>import matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport tensorflow as tf\nimport torch\nimport cv2\nimport nltk\n\n# \u4f7f\u7528 sklearn \u5167\u5efa\u7684\u8cc7\u6599\u96c6\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n# \u5c07\u8cc7\u6599\u96c6\u5207\u5272\u6210\u8a13\u7df4\u96c6\u548c\u6e2c\u8a66\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# \u4f7f\u7528 Logistic Regression \u5206\u985e\u5668\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n\n# \u4f7f\u7528 Matplotlib \u7e6a\u88fd\u8cc7\u6599\u548c\u5206\u985e\u7d50\u679c\nplt.scatter(X[:, 0], X[:, 1], c=y)\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\nplt.title('Iris Data')\nplt.show()\n\n# \u4f7f\u7528 Pandas \u8b80\u53d6\u8cc7\u6599\u96c6\u4e26\u986f\u793a\u524d\u5e7e\u7b46\u8cc7\u6599\ndf = pd.DataFrame(iris.data, columns=iris.feature_names)\nprint(df.head())\n\n# \u4f7f\u7528 Keras \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u795e\u7d93\u7db2\u8def\u6a21\u578b\nmodel = Sequential()\nmodel.add(Dense(10, input_dim=4, activation='relu'))\nmodel.add(Dense(3, activation='softmax'))\n\n# \u4f7f\u7528 TensorFlow \u8a2d\u5b9a\u904b\u7b97\u914d\u7f6e\u4e26\u8a13\u7df4\u6a21\u578b\nconfig = tf.compat.v1.ConfigProto()\nconfig.gpu_options.allow_growth = True\nsession = tf.compat.v1.Session(config=config)\nkeras.backend.set_session(session)\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=100, batch_size=10, verbose=1)\n\n# \u4f7f\u7528 PyTorch \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u795e\u7d93\u7db2\u8def\u6a21\u578b\nclass Net(torch.nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = torch.nn.Linear(4, 10)\n        self.fc2 = torch.nn.Linear(10, 3)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\nnet = Net()\n\n# \u8a2d\u5b9a\u904b\u7b97\u88dd\u7f6e\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nnet.to(device)\n\n# \u5b9a\u7fa9\u640d\u5931\u51fd\u6578\u548c\u512a\u5316\u5668\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(net.parameters(), lr=0.001)\n\n# \u8f49\u63db\u8a13\u7df4\u8cc7\u6599\u70ba Tensor\ninputs = torch.Tensor(X_train).to(device)\nlabels = torch.Tensor(y_train).long().to(device)\n\n# \u8a13\u7df4\u6a21\u578b\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = net(inputs)\n    loss = criterion(outputs, labels)\n    loss.backward()\n    optimizer.step()\n\nprint(\"All packages are installed and working correctly!\")\n</code></pre>"},{"location":"example/env_test/","title":"Env test","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport tensorflow as tf\nimport torch\nimport cv2\nimport nltk\n</pre> import matplotlib.pyplot as plt import pandas as pd from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression import keras from keras.models import Sequential from keras.layers import Dense import tensorflow as tf import torch import cv2 import nltk <pre>2023-06-08 00:54:46.185849: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n2023-06-08 00:54:46.805653: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.7.16/x64/lib\n2023-06-08 00:54:46.805680: I tensorflow/compiler/xla/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n2023-06-08 00:54:48.657967: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.7.16/x64/lib\n2023-06-08 00:54:48.658164: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.7.16/x64/lib\n2023-06-08 00:54:48.658180: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> In\u00a0[2]: Copied! <pre># \u4f7f\u7528 sklearn \u5167\u5efa\u7684\u8cc7\u6599\u96c6\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n</pre> # \u4f7f\u7528 sklearn \u5167\u5efa\u7684\u8cc7\u6599\u96c6 iris = datasets.load_iris() X = iris.data y = iris.target In\u00a0[3]: Copied! <pre># \u5c07\u8cc7\u6599\u96c6\u5207\u5272\u6210\u8a13\u7df4\u96c6\u548c\u6e2c\u8a66\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n</pre> # \u5c07\u8cc7\u6599\u96c6\u5207\u5272\u6210\u8a13\u7df4\u96c6\u548c\u6e2c\u8a66\u96c6 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) In\u00a0[4]: Copied! <pre># \u4f7f\u7528 Logistic Regression \u5206\u985e\u5668\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n</pre> # \u4f7f\u7528 Logistic Regression \u5206\u985e\u5668 clf = LogisticRegression() clf.fit(X_train, y_train) <pre>/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n</pre> Out[4]: <pre>LogisticRegression()</pre> In\u00a0[5]: Copied! <pre># \u4f7f\u7528 Matplotlib \u7e6a\u88fd\u8cc7\u6599\u548c\u5206\u985e\u7d50\u679c\nplt.scatter(X[:, 0], X[:, 1], c=y)\nplt.xlabel('Sepal Length')\nplt.ylabel('Sepal Width')\nplt.title('Iris Data')\nplt.show()\n</pre> # \u4f7f\u7528 Matplotlib \u7e6a\u88fd\u8cc7\u6599\u548c\u5206\u985e\u7d50\u679c plt.scatter(X[:, 0], X[:, 1], c=y) plt.xlabel('Sepal Length') plt.ylabel('Sepal Width') plt.title('Iris Data') plt.show() In\u00a0[6]: Copied! <pre># \u4f7f\u7528 Pandas \u8b80\u53d6\u8cc7\u6599\u96c6\u4e26\u986f\u793a\u524d\u5e7e\u7b46\u8cc7\u6599\ndf = pd.DataFrame(iris.data, columns=iris.feature_names)\nprint(df.head())\n</pre> # \u4f7f\u7528 Pandas \u8b80\u53d6\u8cc7\u6599\u96c6\u4e26\u986f\u793a\u524d\u5e7e\u7b46\u8cc7\u6599 df = pd.DataFrame(iris.data, columns=iris.feature_names) print(df.head()) <pre>   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n0                5.1               3.5                1.4               0.2\n1                4.9               3.0                1.4               0.2\n2                4.7               3.2                1.3               0.2\n3                4.6               3.1                1.5               0.2\n4                5.0               3.6                1.4               0.2\n</pre> In\u00a0[7]: Copied! <pre># \u4f7f\u7528 Keras \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u795e\u7d93\u7db2\u8def\u6a21\u578b\nmodel = Sequential()\nmodel.add(Dense(10, input_dim=4, activation='relu'))\nmodel.add(Dense(3, activation='softmax'))\n</pre> # \u4f7f\u7528 Keras \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u795e\u7d93\u7db2\u8def\u6a21\u578b model = Sequential() model.add(Dense(10, input_dim=4, activation='relu')) model.add(Dense(3, activation='softmax')) <pre>2023-06-08 00:54:52.495056: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/cv2/../../lib64:/opt/hostedtoolcache/Python/3.7.16/x64/lib\n2023-06-08 00:54:52.495592: W tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.cc:265] failed call to cuInit: UNKNOWN ERROR (303)\n2023-06-08 00:54:52.495636: I tensorflow/compiler/xla/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (fv-az617-204): /proc/driver/nvidia/version does not exist\n2023-06-08 00:54:52.496378: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n</pre> In\u00a0[8]: Copied! <pre># \u4f7f\u7528 TensorFlow \u8a2d\u5b9a\u904b\u7b97\u914d\u7f6e\u4e26\u8a13\u7df4\u6a21\u578b\nconfig = tf.compat.v1.ConfigProto()\nconfig.gpu_options.allow_growth = True\nsession = tf.compat.v1.Session(config=config)\nkeras.backend.set_session(session)\n</pre> # \u4f7f\u7528 TensorFlow \u8a2d\u5b9a\u904b\u7b97\u914d\u7f6e\u4e26\u8a13\u7df4\u6a21\u578b config = tf.compat.v1.ConfigProto() config.gpu_options.allow_growth = True session = tf.compat.v1.Session(config=config) keras.backend.set_session(session) In\u00a0[9]: Copied! <pre>model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=100, batch_size=10, verbose=1)\n</pre> model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X_train, y_train, epochs=100, batch_size=10, verbose=1) <pre>Epoch 1/100\n12/12 [==============================] - 1s 2ms/step - loss: 1.8492 - accuracy: 0.0000e+00\nEpoch 2/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.6831 - accuracy: 0.0000e+00\nEpoch 3/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.5526 - accuracy: 0.0000e+00\nEpoch 4/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.4405 - accuracy: 0.0000e+00\nEpoch 5/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.3571 - accuracy: 0.0000e+00\nEpoch 6/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.3005 - accuracy: 0.0000e+00\nEpoch 7/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.2660 - accuracy: 0.0000e+00\nEpoch 8/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.2484 - accuracy: 0.0167\nEpoch 9/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.2344 - accuracy: 0.1167\nEpoch 10/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.2227 - accuracy: 0.2250\nEpoch 11/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.2128 - accuracy: 0.2000\nEpoch 12/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.2032 - accuracy: 0.2417\nEpoch 13/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1932 - accuracy: 0.2333\nEpoch 14/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1834 - accuracy: 0.2333\nEpoch 15/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1756 - accuracy: 0.2583\nEpoch 16/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1675 - accuracy: 0.2667\nEpoch 17/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1588 - accuracy: 0.3250\nEpoch 18/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1512 - accuracy: 0.3417\nEpoch 19/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1437 - accuracy: 0.3417\nEpoch 20/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1359 - accuracy: 0.3583\nEpoch 21/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1287 - accuracy: 0.3667\nEpoch 22/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1246 - accuracy: 0.3500\nEpoch 23/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1175 - accuracy: 0.3667\nEpoch 24/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1097 - accuracy: 0.3583\nEpoch 25/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.1051 - accuracy: 0.3667\nEpoch 26/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0985 - accuracy: 0.3917\nEpoch 27/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0913 - accuracy: 0.3917\nEpoch 28/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0849 - accuracy: 0.4167\nEpoch 29/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0768 - accuracy: 0.4250\nEpoch 30/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0723 - accuracy: 0.4333\nEpoch 31/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0704 - accuracy: 0.3833\nEpoch 32/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0601 - accuracy: 0.3833\nEpoch 33/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0545 - accuracy: 0.4167\nEpoch 34/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0478 - accuracy: 0.4583\nEpoch 35/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0417 - accuracy: 0.4500\nEpoch 36/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0361 - accuracy: 0.4417\nEpoch 37/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0297 - accuracy: 0.4833\nEpoch 38/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0257 - accuracy: 0.4500\nEpoch 39/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0169 - accuracy: 0.5417\nEpoch 40/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0114 - accuracy: 0.5917\nEpoch 41/100\n12/12 [==============================] - 0s 2ms/step - loss: 1.0046 - accuracy: 0.6250\nEpoch 42/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9981 - accuracy: 0.6917\nEpoch 43/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9930 - accuracy: 0.7333\nEpoch 44/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9870 - accuracy: 0.6583\nEpoch 45/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9794 - accuracy: 0.6750\nEpoch 46/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9744 - accuracy: 0.7250\nEpoch 47/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9647 - accuracy: 0.7250\nEpoch 48/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9585 - accuracy: 0.7333\nEpoch 49/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9515 - accuracy: 0.7417\nEpoch 50/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9444 - accuracy: 0.7500\nEpoch 51/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9375 - accuracy: 0.7500\nEpoch 52/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9310 - accuracy: 0.7667\nEpoch 53/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9230 - accuracy: 0.8083\nEpoch 54/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9152 - accuracy: 0.7417\nEpoch 55/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9065 - accuracy: 0.7417\nEpoch 56/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.9001 - accuracy: 0.7500\nEpoch 57/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8905 - accuracy: 0.7417\nEpoch 58/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8836 - accuracy: 0.7750\nEpoch 59/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8742 - accuracy: 0.8083\nEpoch 60/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8663 - accuracy: 0.7583\nEpoch 61/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8594 - accuracy: 0.7583\nEpoch 62/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8500 - accuracy: 0.7500\nEpoch 63/100\n12/12 [==============================] - 0s 3ms/step - loss: 0.8422 - accuracy: 0.7833\nEpoch 64/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8334 - accuracy: 0.8333\nEpoch 65/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8253 - accuracy: 0.7917\nEpoch 66/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8171 - accuracy: 0.7333\nEpoch 67/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.8065 - accuracy: 0.7417\nEpoch 68/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7971 - accuracy: 0.7833\nEpoch 69/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7898 - accuracy: 0.8417\nEpoch 70/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7811 - accuracy: 0.8333\nEpoch 71/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7716 - accuracy: 0.8333\nEpoch 72/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7646 - accuracy: 0.8417\nEpoch 73/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7575 - accuracy: 0.7500\nEpoch 74/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7462 - accuracy: 0.7667\nEpoch 75/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7375 - accuracy: 0.7750\nEpoch 76/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7280 - accuracy: 0.8167\nEpoch 77/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7214 - accuracy: 0.7917\nEpoch 78/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7115 - accuracy: 0.8333\nEpoch 79/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.7041 - accuracy: 0.8750\nEpoch 80/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6956 - accuracy: 0.8500\nEpoch 81/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6886 - accuracy: 0.8500\nEpoch 82/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6802 - accuracy: 0.8167\nEpoch 83/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6726 - accuracy: 0.8083\nEpoch 84/100\n12/12 [==============================] - 0s 3ms/step - loss: 0.6652 - accuracy: 0.8250\nEpoch 85/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6577 - accuracy: 0.8250\nEpoch 86/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6490 - accuracy: 0.8417\nEpoch 87/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6413 - accuracy: 0.8417\nEpoch 88/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6342 - accuracy: 0.8417\nEpoch 89/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6280 - accuracy: 0.8750\nEpoch 90/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6209 - accuracy: 0.8417\nEpoch 91/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6139 - accuracy: 0.8583\nEpoch 92/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6067 - accuracy: 0.8500\nEpoch 93/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.6009 - accuracy: 0.8833\nEpoch 94/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.5950 - accuracy: 0.8583\nEpoch 95/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.5878 - accuracy: 0.8667\nEpoch 96/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.5836 - accuracy: 0.9083\nEpoch 97/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.5760 - accuracy: 0.9167\nEpoch 98/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.5702 - accuracy: 0.9000\nEpoch 99/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.5657 - accuracy: 0.8500\nEpoch 100/100\n12/12 [==============================] - 0s 2ms/step - loss: 0.5593 - accuracy: 0.8417\n</pre> Out[9]: <pre>&lt;keras.callbacks.History at 0x7f8fdc45e150&gt;</pre> In\u00a0[10]: Copied! <pre># \u4f7f\u7528 PyTorch \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u795e\u7d93\u7db2\u8def\u6a21\u578b\nclass Net(torch.nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = torch.nn.Linear(4, 10)\n        self.fc2 = torch.nn.Linear(10, 3)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n</pre> # \u4f7f\u7528 PyTorch \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u795e\u7d93\u7db2\u8def\u6a21\u578b class Net(torch.nn.Module):     def __init__(self):         super(Net, self).__init__()         self.fc1 = torch.nn.Linear(4, 10)         self.fc2 = torch.nn.Linear(10, 3)      def forward(self, x):         x = torch.relu(self.fc1(x))         x = self.fc2(x)         return x In\u00a0[11]: Copied! <pre>net = Net()\n</pre> net = Net() In\u00a0[12]: Copied! <pre># \u8a2d\u5b9a\u904b\u7b97\u88dd\u7f6e\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nnet.to(device)\n</pre> # \u8a2d\u5b9a\u904b\u7b97\u88dd\u7f6e device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\") net.to(device) Out[12]: <pre>Net(\n  (fc1): Linear(in_features=4, out_features=10, bias=True)\n  (fc2): Linear(in_features=10, out_features=3, bias=True)\n)</pre> In\u00a0[13]: Copied! <pre># \u5b9a\u7fa9\u640d\u5931\u51fd\u6578\u548c\u512a\u5316\u5668\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(net.parameters(), lr=0.001)\n</pre> # \u5b9a\u7fa9\u640d\u5931\u51fd\u6578\u548c\u512a\u5316\u5668 criterion = torch.nn.CrossEntropyLoss() optimizer = torch.optim.SGD(net.parameters(), lr=0.001) In\u00a0[14]: Copied! <pre># \u8f49\u63db\u8a13\u7df4\u8cc7\u6599\u70ba Tensor\ninputs = torch.Tensor(X_train).to(device)\nlabels = torch.Tensor(y_train).long().to(device)\n</pre> # \u8f49\u63db\u8a13\u7df4\u8cc7\u6599\u70ba Tensor inputs = torch.Tensor(X_train).to(device) labels = torch.Tensor(y_train).long().to(device) In\u00a0[15]: Copied! <pre># \u8a13\u7df4\u6a21\u578b\nfor epoch in range(100):\n    optimizer.zero_grad()\n    outputs = net(inputs)\n    loss = criterion(outputs, labels)\n    loss.backward()\n    optimizer.step()\n\nprint(\"All packages are installed and working correctly!\")\n</pre> # \u8a13\u7df4\u6a21\u578b for epoch in range(100):     optimizer.zero_grad()     outputs = net(inputs)     loss = criterion(outputs, labels)     loss.backward()     optimizer.step()  print(\"All packages are installed and working correctly!\")  <pre>All packages are installed and working correctly!\n</pre>"}]}